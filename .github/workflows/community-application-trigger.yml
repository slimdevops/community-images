name: Community Image Runner
on:
  workflow_dispatch:
    inputs:
      watcher_id:
        description: "Watcher ID"
        required: true
      digest:
        description: "Image Digest"
        required: false
        default: ""
      registry:
        description: "Image Registry"
        required: false
        default: "docker.io"
      namespace:
        description: "Image Namespace"
        required: true
      repository:
        description: "Image Repository"
        required: true
      tag:
        description: "Image TAG"
        required: true
      os:
        description: "Image OS"
        required: true
      arch:
        description: "Image Arch"
        required: true
run-name: "Running: ${{ github.event.inputs.registry}}/${{ github.event.inputs.namespace}}/${{ github.event.inputs.repository}}:${{ github.event.inputs.tag}}"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      REPO_BRANCH: ${{ github.ref_name }}
      REGISTRY: ${{ github.event.inputs.registry }}
      NAMESPACE: ${{ github.event.inputs.namespace }}
      REPOSITORY: ${{ github.event.inputs.repository }}
      DIGEST: ${{ github.event.inputs.digest }}
      TAG: ${{ github.event.inputs.tag }}
      SLIM_IMAGE_NS: ${{ secrets.SLIM_IMAGE_NS }}
      CONNECTOR_ID: ${{ secrets.CONNECTOR_ID }}
      ACTION_RUNNER_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      SLIM_IMAGE_REGISTRY: ${{ secrets.SLIM_IMAGE_REGISTRY }}
      API_DOMAIN: ${{ secrets.API_DOMAIN }}
      IMAGE_OS: ${{ github.event.inputs.os }}
      IMAGE_ARCH: ${{ github.event.inputs.arch }}
      DISCORD_ENDPOINT: ${{ secrets.DISCORD_ENDPOINT || vars.DISCORD_ENDPOINT }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACTOR  }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Setup Dependencies
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
          ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
        run: "${GITHUB_WORKSPACE}/bin/setup_dependencies.sh"

      - name: Identify Community Image Project
        id: project-identify
        run: " $GITHUB_WORKSPACE/bin/identify.sh"

      - name: Configure Community Project
        working-directory: "${{ env.PROJECT_PATH }}"
        run: "${GITHUB_WORKSPACE}/bin/configure_project.sh && ${HOOK_EXEC} project-setup"

      - name: "Print"
        run: "echo $API_DOMAIN"
      - name: "X-Ray"
        env:
          ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: " ${GITHUB_WORKSPACE}/bin/x_ray_report.sh"

      - name: "Vulnerability Scan"
        env:
          ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: " ${GITHUB_WORKSPACE}/bin/vulnerability_report.sh"

      - name: "Vulnerability Scan Artifact"
        if: env.PROJECT_VSCAN_DONE == 'true' || env.PROJECT_VSCAN_DONE == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: "X-Ray and Vulnerability Scan"
          path: "${{ env.PROJECT_PATH }}/vscan-xray-reports"
          retention-days: 5

      - name: Pull Repo Changes
        if: always() && steps.project-identify.outputs.PROJECT_IDENTIFIED
        run: |
          git config --global user.email "marketing@slim.ai"
          git config --global user.name "slim-bot"
          git config pull.ff only
          git pull

      - name: Failure Event
        if: failure() && steps.project-identify.outputs.PROJECT_IDENTIFIED
        run: |
          node ${GITHUB_WORKSPACE}/bin/status.js failed
          git add ${PROJECT_PATH}/README.md
          git add ${GITHUB_WORKSPACE}/README.md
          git commit -m "docs: ${PROJECT_ORIGINAL_IMAGE} -> failed"
          git pull
          git push origin HEAD:${GITHUB_REF}
          ${GITHUB_WORKSPACE}/bin/submit_status.sh "failed"

      - name: Success Event
        if: success() && steps.project-identify.outputs.PROJECT_IDENTIFIED
        run: |
          node ${GITHUB_WORKSPACE}/bin/status.js success
          git add ${PROJECT_PATH}/README.md
          git add ${GITHUB_WORKSPACE}/README.md
          git commit -m "docs: ${PROJECT_ORIGINAL_IMAGE} -> success"
          git pull
          git push origin HEAD:${GITHUB_REF}
          ${GITHUB_WORKSPACE}/bin/submit_status.sh success
